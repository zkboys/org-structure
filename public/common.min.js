/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			modules[moduleId] = moreModules[moduleId];
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);
/******/ 		if(moreModules[0]) {
/******/ 			installedModules[0] = 0;
/******/ 			return __webpack_require__(0);
/******/ 		}
/******/ 	};

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		7:0
/******/ 	};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}

/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);

/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;

/******/ 			script.src = __webpack_require__.p + "" + ({"11":"index","12":"signin","13":"first-login"}[chunkId]||chunkId) + "." + {"0":"ef3f9853","1":"79d30454","2":"a269bb3c","3":"ca78600e","4":"3030fae8","5":"6e0408cd","6":"00df9a2a","8":"b9097069","9":"7bf5f3c8","10":"a7d6601e","11":"9939d643","12":"e3121963","13":"cf2d3608"}[chunkId] + ".min.js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};

/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/public/";
/******/ })
/************************************************************************/
/******/ ({

/***/ 2:
/***/ function(module, exports) {

	module.exports = React;

/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = antd;

/***/ },

/***/ 4:
/***/ function(module, exports) {

	/* eslint-disable no-unused-vars */
	'use strict';
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },

/***/ 8:
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var Emitter = __webpack_require__(217);
	var reduce = __webpack_require__(270);
	var requestBase = __webpack_require__(279);
	var isObject = __webpack_require__(181);

	/**
	 * Root reference for iframes.
	 */

	var root;
	if (typeof window !== 'undefined') { // Browser window
	  root = window;
	} else if (typeof self !== 'undefined') { // Web Worker
	  root = self;
	} else { // Other environments
	  root = this;
	}

	/**
	 * Noop.
	 */

	function noop(){};

	/**
	 * Check if `obj` is a host object,
	 * we don't want to serialize these :)
	 *
	 * TODO: future proof, move to compoent land
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */

	function isHost(obj) {
	  var str = {}.toString.call(obj);

	  switch (str) {
	    case '[object File]':
	    case '[object Blob]':
	    case '[object FormData]':
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Expose `request`.
	 */

	var request = module.exports = __webpack_require__(280).bind(null, Request);

	/**
	 * Determine XHR.
	 */

	request.getXHR = function () {
	  if (root.XMLHttpRequest
	      && (!root.location || 'file:' != root.location.protocol
	          || !root.ActiveXObject)) {
	    return new XMLHttpRequest;
	  } else {
	    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
	  }
	  return false;
	};

	/**
	 * Removes leading and trailing whitespace, added to support IE.
	 *
	 * @param {String} s
	 * @return {String}
	 * @api private
	 */

	var trim = ''.trim
	  ? function(s) { return s.trim(); }
	  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

	/**
	 * Serialize the given `obj`.
	 *
	 * @param {Object} obj
	 * @return {String}
	 * @api private
	 */

	function serialize(obj) {
	  if (!isObject(obj)) return obj;
	  var pairs = [];
	  for (var key in obj) {
	    if (null != obj[key]) {
	      pushEncodedKeyValuePair(pairs, key, obj[key]);
	        }
	      }
	  return pairs.join('&');
	}

	/**
	 * Helps 'serialize' with serializing arrays.
	 * Mutates the pairs array.
	 *
	 * @param {Array} pairs
	 * @param {String} key
	 * @param {Mixed} val
	 */

	function pushEncodedKeyValuePair(pairs, key, val) {
	  if (Array.isArray(val)) {
	    return val.forEach(function(v) {
	      pushEncodedKeyValuePair(pairs, key, v);
	    });
	  }
	  pairs.push(encodeURIComponent(key)
	    + '=' + encodeURIComponent(val));
	}

	/**
	 * Expose serialization method.
	 */

	 request.serializeObject = serialize;

	 /**
	  * Parse the given x-www-form-urlencoded `str`.
	  *
	  * @param {String} str
	  * @return {Object}
	  * @api private
	  */

	function parseString(str) {
	  var obj = {};
	  var pairs = str.split('&');
	  var parts;
	  var pair;

	  for (var i = 0, len = pairs.length; i < len; ++i) {
	    pair = pairs[i];
	    parts = pair.split('=');
	    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);
	  }

	  return obj;
	}

	/**
	 * Expose parser.
	 */

	request.parseString = parseString;

	/**
	 * Default MIME type map.
	 *
	 *     superagent.types.xml = 'application/xml';
	 *
	 */

	request.types = {
	  html: 'text/html',
	  json: 'application/json',
	  xml: 'application/xml',
	  urlencoded: 'application/x-www-form-urlencoded',
	  'form': 'application/x-www-form-urlencoded',
	  'form-data': 'application/x-www-form-urlencoded'
	};

	/**
	 * Default serialization map.
	 *
	 *     superagent.serialize['application/xml'] = function(obj){
	 *       return 'generated xml here';
	 *     };
	 *
	 */

	 request.serialize = {
	   'application/x-www-form-urlencoded': serialize,
	   'application/json': JSON.stringify
	 };

	 /**
	  * Default parsers.
	  *
	  *     superagent.parse['application/xml'] = function(str){
	  *       return { object parsed from str };
	  *     };
	  *
	  */

	request.parse = {
	  'application/x-www-form-urlencoded': parseString,
	  'application/json': JSON.parse
	};

	/**
	 * Parse the given header `str` into
	 * an object containing the mapped fields.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */

	function parseHeader(str) {
	  var lines = str.split(/\r?\n/);
	  var fields = {};
	  var index;
	  var line;
	  var field;
	  var val;

	  lines.pop(); // trailing CRLF

	  for (var i = 0, len = lines.length; i < len; ++i) {
	    line = lines[i];
	    index = line.indexOf(':');
	    field = line.slice(0, index).toLowerCase();
	    val = trim(line.slice(index + 1));
	    fields[field] = val;
	  }

	  return fields;
	}

	/**
	 * Check if `mime` is json or has +json structured syntax suffix.
	 *
	 * @param {String} mime
	 * @return {Boolean}
	 * @api private
	 */

	function isJSON(mime) {
	  return /[\/+]json\b/.test(mime);
	}

	/**
	 * Return the mime type for the given `str`.
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */

	function type(str){
	  return str.split(/ *; */).shift();
	};

	/**
	 * Return header field parameters.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */

	function params(str){
	  return reduce(str.split(/ *; */), function(obj, str){
	    var parts = str.split(/ *= */)
	      , key = parts.shift()
	      , val = parts.shift();

	    if (key && val) obj[key] = val;
	    return obj;
	  }, {});
	};

	/**
	 * Initialize a new `Response` with the given `xhr`.
	 *
	 *  - set flags (.ok, .error, etc)
	 *  - parse header
	 *
	 * Examples:
	 *
	 *  Aliasing `superagent` as `request` is nice:
	 *
	 *      request = superagent;
	 *
	 *  We can use the promise-like API, or pass callbacks:
	 *
	 *      request.get('/').end(function(res){});
	 *      request.get('/', function(res){});
	 *
	 *  Sending data can be chained:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' })
	 *        .end(function(res){});
	 *
	 *  Or passed to `.send()`:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' }, function(res){});
	 *
	 *  Or passed to `.post()`:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' })
	 *        .end(function(res){});
	 *
	 * Or further reduced to a single call for simple cases:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' }, function(res){});
	 *
	 * @param {XMLHTTPRequest} xhr
	 * @param {Object} options
	 * @api private
	 */

	function Response(req, options) {
	  options = options || {};
	  this.req = req;
	  this.xhr = this.req.xhr;
	  // responseText is accessible only if responseType is '' or 'text' and on older browsers
	  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
	     ? this.xhr.responseText
	     : null;
	  this.statusText = this.req.xhr.statusText;
	  this.setStatusProperties(this.xhr.status);
	  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
	  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
	  // getResponseHeader still works. so we get content-type even if getting
	  // other headers fails.
	  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
	  this.setHeaderProperties(this.header);
	  this.body = this.req.method != 'HEAD'
	    ? this.parseBody(this.text ? this.text : this.xhr.response)
	    : null;
	}

	/**
	 * Get case-insensitive `field` value.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */

	Response.prototype.get = function(field){
	  return this.header[field.toLowerCase()];
	};

	/**
	 * Set header related properties:
	 *
	 *   - `.type` the content type without params
	 *
	 * A response of "Content-Type: text/plain; charset=utf-8"
	 * will provide you with a `.type` of "text/plain".
	 *
	 * @param {Object} header
	 * @api private
	 */

	Response.prototype.setHeaderProperties = function(header){
	  // content-type
	  var ct = this.header['content-type'] || '';
	  this.type = type(ct);

	  // params
	  var obj = params(ct);
	  for (var key in obj) this[key] = obj[key];
	};

	/**
	 * Parse the given body `str`.
	 *
	 * Used for auto-parsing of bodies. Parsers
	 * are defined on the `superagent.parse` object.
	 *
	 * @param {String} str
	 * @return {Mixed}
	 * @api private
	 */

	Response.prototype.parseBody = function(str){
	  var parse = request.parse[this.type];
	  if (!parse && isJSON(this.type)) {
	    parse = request.parse['application/json'];
	  }
	  return parse && str && (str.length || str instanceof Object)
	    ? parse(str)
	    : null;
	};

	/**
	 * Set flags such as `.ok` based on `status`.
	 *
	 * For example a 2xx response will give you a `.ok` of __true__
	 * whereas 5xx will be __false__ and `.error` will be __true__. The
	 * `.clientError` and `.serverError` are also available to be more
	 * specific, and `.statusType` is the class of error ranging from 1..5
	 * sometimes useful for mapping respond colors etc.
	 *
	 * "sugar" properties are also defined for common cases. Currently providing:
	 *
	 *   - .noContent
	 *   - .badRequest
	 *   - .unauthorized
	 *   - .notAcceptable
	 *   - .notFound
	 *
	 * @param {Number} status
	 * @api private
	 */

	Response.prototype.setStatusProperties = function(status){
	  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
	  if (status === 1223) {
	    status = 204;
	  }

	  var type = status / 100 | 0;

	  // status / class
	  this.status = this.statusCode = status;
	  this.statusType = type;

	  // basics
	  this.info = 1 == type;
	  this.ok = 2 == type;
	  this.clientError = 4 == type;
	  this.serverError = 5 == type;
	  this.error = (4 == type || 5 == type)
	    ? this.toError()
	    : false;

	  // sugar
	  this.accepted = 202 == status;
	  this.noContent = 204 == status;
	  this.badRequest = 400 == status;
	  this.unauthorized = 401 == status;
	  this.notAcceptable = 406 == status;
	  this.notFound = 404 == status;
	  this.forbidden = 403 == status;
	};

	/**
	 * Return an `Error` representative of this response.
	 *
	 * @return {Error}
	 * @api public
	 */

	Response.prototype.toError = function(){
	  var req = this.req;
	  var method = req.method;
	  var url = req.url;

	  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
	  var err = new Error(msg);
	  err.status = this.status;
	  err.method = method;
	  err.url = url;

	  return err;
	};

	/**
	 * Expose `Response`.
	 */

	request.Response = Response;

	/**
	 * Initialize a new `Request` with the given `method` and `url`.
	 *
	 * @param {String} method
	 * @param {String} url
	 * @api public
	 */

	function Request(method, url) {
	  var self = this;
	  this._query = this._query || [];
	  this.method = method;
	  this.url = url;
	  this.header = {}; // preserves header name case
	  this._header = {}; // coerces header names to lowercase
	  this.on('end', function(){
	    var err = null;
	    var res = null;

	    try {
	      res = new Response(self);
	    } catch(e) {
	      err = new Error('Parser is unable to parse the response');
	      err.parse = true;
	      err.original = e;
	      // issue #675: return the raw response if the response parsing fails
	      err.rawResponse = self.xhr && self.xhr.responseText ? self.xhr.responseText : null;
	      // issue #876: return the http status code if the response parsing fails
	      err.statusCode = self.xhr && self.xhr.status ? self.xhr.status : null;
	      return self.callback(err);
	    }

	    self.emit('response', res);

	    if (err) {
	      return self.callback(err, res);
	    }

	    if (res.status >= 200 && res.status < 300) {
	      return self.callback(err, res);
	    }

	    var new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
	    new_err.original = err;
	    new_err.response = res;
	    new_err.status = res.status;

	    self.callback(new_err, res);
	  });
	}

	/**
	 * Mixin `Emitter` and `requestBase`.
	 */

	Emitter(Request.prototype);
	for (var key in requestBase) {
	  Request.prototype[key] = requestBase[key];
	}

	/**
	 * Abort the request, and clear potential timeout.
	 *
	 * @return {Request}
	 * @api public
	 */

	Request.prototype.abort = function(){
	  if (this.aborted) return;
	  this.aborted = true;
	  this.xhr.abort();
	  this.clearTimeout();
	  this.emit('abort');
	  return this;
	};

	/**
	 * Set Content-Type to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.xml = 'application/xml';
	 *
	 *      request.post('/')
	 *        .type('xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 *      request.post('/')
	 *        .type('application/xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 * @param {String} type
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.type = function(type){
	  this.set('Content-Type', request.types[type] || type);
	  return this;
	};

	/**
	 * Set responseType to `val`. Presently valid responseTypes are 'blob' and 
	 * 'arraybuffer'.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .responseType('blob')
	 *        .end(callback);
	 *
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.responseType = function(val){
	  this._responseType = val;
	  return this;
	};

	/**
	 * Set Accept to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.json = 'application/json';
	 *
	 *      request.get('/agent')
	 *        .accept('json')
	 *        .end(callback);
	 *
	 *      request.get('/agent')
	 *        .accept('application/json')
	 *        .end(callback);
	 *
	 * @param {String} accept
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.accept = function(type){
	  this.set('Accept', request.types[type] || type);
	  return this;
	};

	/**
	 * Set Authorization field value with `user` and `pass`.
	 *
	 * @param {String} user
	 * @param {String} pass
	 * @param {Object} options with 'type' property 'auto' or 'basic' (default 'basic')
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.auth = function(user, pass, options){
	  if (!options) {
	    options = {
	      type: 'basic'
	    }
	  }

	  switch (options.type) {
	    case 'basic':
	      var str = btoa(user + ':' + pass);
	      this.set('Authorization', 'Basic ' + str);
	    break;

	    case 'auto':
	      this.username = user;
	      this.password = pass;
	    break;
	  }
	  return this;
	};

	/**
	* Add query-string `val`.
	*
	* Examples:
	*
	*   request.get('/shoes')
	*     .query('size=10')
	*     .query({ color: 'blue' })
	*
	* @param {Object|String} val
	* @return {Request} for chaining
	* @api public
	*/

	Request.prototype.query = function(val){
	  if ('string' != typeof val) val = serialize(val);
	  if (val) this._query.push(val);
	  return this;
	};

	/**
	 * Queue the given `file` as an attachment to the specified `field`,
	 * with optional `filename`.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .attach(new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
	 *   .end(callback);
	 * ```
	 *
	 * @param {String} field
	 * @param {Blob|File} file
	 * @param {String} filename
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.attach = function(field, file, filename){
	  this._getFormData().append(field, file, filename || file.name);
	  return this;
	};

	Request.prototype._getFormData = function(){
	  if (!this._formData) {
	    this._formData = new root.FormData();
	  }
	  return this._formData;
	};

	/**
	 * Send `data` as the request body, defaulting the `.type()` to "json" when
	 * an object is given.
	 *
	 * Examples:
	 *
	 *       // manual json
	 *       request.post('/user')
	 *         .type('json')
	 *         .send('{"name":"tj"}')
	 *         .end(callback)
	 *
	 *       // auto json
	 *       request.post('/user')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // manual x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send('name=tj')
	 *         .end(callback)
	 *
	 *       // auto x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // defaults to x-www-form-urlencoded
	  *      request.post('/user')
	  *        .send('name=tobi')
	  *        .send('species=ferret')
	  *        .end(callback)
	 *
	 * @param {String|Object} data
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.send = function(data){
	  var obj = isObject(data);
	  var type = this._header['content-type'];

	  // merge
	  if (obj && isObject(this._data)) {
	    for (var key in data) {
	      this._data[key] = data[key];
	    }
	  } else if ('string' == typeof data) {
	    if (!type) this.type('form');
	    type = this._header['content-type'];
	    if ('application/x-www-form-urlencoded' == type) {
	      this._data = this._data
	        ? this._data + '&' + data
	        : data;
	    } else {
	      this._data = (this._data || '') + data;
	    }
	  } else {
	    this._data = data;
	  }

	  if (!obj || isHost(data)) return this;
	  if (!type) this.type('json');
	  return this;
	};

	/**
	 * @deprecated
	 */
	Response.prototype.parse = function serialize(fn){
	  if (root.console) {
	    console.warn("Client-side parse() method has been renamed to serialize(). This method is not compatible with superagent v2.0");
	  }
	  this.serialize(fn);
	  return this;
	};

	Response.prototype.serialize = function serialize(fn){
	  this._parser = fn;
	  return this;
	};

	/**
	 * Invoke the callback with `err` and `res`
	 * and handle arity check.
	 *
	 * @param {Error} err
	 * @param {Response} res
	 * @api private
	 */

	Request.prototype.callback = function(err, res){
	  var fn = this._callback;
	  this.clearTimeout();
	  fn(err, res);
	};

	/**
	 * Invoke callback with x-domain error.
	 *
	 * @api private
	 */

	Request.prototype.crossDomainError = function(){
	  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
	  err.crossDomain = true;

	  err.status = this.status;
	  err.method = this.method;
	  err.url = this.url;

	  this.callback(err);
	};

	/**
	 * Invoke callback with timeout error.
	 *
	 * @api private
	 */

	Request.prototype.timeoutError = function(){
	  var timeout = this._timeout;
	  var err = new Error('timeout of ' + timeout + 'ms exceeded');
	  err.timeout = timeout;
	  this.callback(err);
	};

	/**
	 * Enable transmission of cookies with x-domain requests.
	 *
	 * Note that for this to work the origin must not be
	 * using "Access-Control-Allow-Origin" with a wildcard,
	 * and also must set "Access-Control-Allow-Credentials"
	 * to "true".
	 *
	 * @api public
	 */

	Request.prototype.withCredentials = function(){
	  this._withCredentials = true;
	  return this;
	};

	/**
	 * Initiate request, invoking callback `fn(res)`
	 * with an instanceof `Response`.
	 *
	 * @param {Function} fn
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.end = function(fn){
	  var self = this;
	  var xhr = this.xhr = request.getXHR();
	  var query = this._query.join('&');
	  var timeout = this._timeout;
	  var data = this._formData || this._data;

	  // store callback
	  this._callback = fn || noop;

	  // state change
	  xhr.onreadystatechange = function(){
	    if (4 != xhr.readyState) return;

	    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
	    // result in the error "Could not complete the operation due to error c00c023f"
	    var status;
	    try { status = xhr.status } catch(e) { status = 0; }

	    if (0 == status) {
	      if (self.timedout) return self.timeoutError();
	      if (self.aborted) return;
	      return self.crossDomainError();
	    }
	    self.emit('end');
	  };

	  // progress
	  var handleProgress = function(e){
	    if (e.total > 0) {
	      e.percent = e.loaded / e.total * 100;
	    }
	    e.direction = 'download';
	    self.emit('progress', e);
	  };
	  if (this.hasListeners('progress')) {
	    xhr.onprogress = handleProgress;
	  }
	  try {
	    if (xhr.upload && this.hasListeners('progress')) {
	      xhr.upload.onprogress = handleProgress;
	    }
	  } catch(e) {
	    // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
	    // Reported here:
	    // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
	  }

	  // timeout
	  if (timeout && !this._timer) {
	    this._timer = setTimeout(function(){
	      self.timedout = true;
	      self.abort();
	    }, timeout);
	  }

	  // querystring
	  if (query) {
	    query = request.serializeObject(query);
	    this.url += ~this.url.indexOf('?')
	      ? '&' + query
	      : '?' + query;
	  }

	  // initiate request
	  if (this.username && this.password) {
	    xhr.open(this.method, this.url, true, this.username, this.password);
	  } else {
	    xhr.open(this.method, this.url, true);
	  }

	  // CORS
	  if (this._withCredentials) xhr.withCredentials = true;

	  // body
	  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {
	    // serialize stuff
	    var contentType = this._header['content-type'];
	    var serialize = this._parser || request.serialize[contentType ? contentType.split(';')[0] : ''];
	    if (!serialize && isJSON(contentType)) serialize = request.serialize['application/json'];
	    if (serialize) data = serialize(data);
	  }

	  // set header fields
	  for (var field in this.header) {
	    if (null == this.header[field]) continue;
	    xhr.setRequestHeader(field, this.header[field]);
	  }

	  if (this._responseType) {
	    xhr.responseType = this._responseType;
	  }

	  // send stuff
	  this.emit('request', this);

	  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
	  // We need null here if data is undefined
	  xhr.send(typeof data !== 'undefined' ? data : null);
	  return this;
	};


	/**
	 * Expose `Request`.
	 */

	request.Request = Request;

	/**
	 * GET `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.get = function(url, data, fn){
	  var req = request('GET', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.query(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * HEAD `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.head = function(url, data, fn){
	  var req = request('HEAD', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * DELETE `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	function del(url, fn){
	  var req = request('DELETE', url);
	  if (fn) req.end(fn);
	  return req;
	};

	request['del'] = del;
	request['delete'] = del;

	/**
	 * PATCH `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} data
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.patch = function(url, data, fn){
	  var req = request('PATCH', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * POST `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} data
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.post = function(url, data, fn){
	  var req = request('POST', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * PUT `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.put = function(url, data, fn){
	  var req = request('PUT', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};


/***/ },

/***/ 112:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _superagent = __webpack_require__(8);

	var _superagent2 = _interopRequireDefault(_superagent);

	var _common = __webpack_require__(153);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var filter = function filter(req) {
	    req.on('response', function (res) {
	        if (res.status === 401) {
	            // window.location.href = '/singin';
	            // 重新刷新之后，会根据当前url请求后端，后端发现未登录，会记录当前url，并跳转登录，登录之后会跳转回当前url
	            window.location.reload();
	        }
	    });

	    // req.on('request', () => {
	    //    console.log(req);
	    // });

	    // 设置超时
	    req.timeout(1000 * 30);
	    // 打断
	    req.on('abort', function () {});

	    // req.on('end', () => {
	    //    console.log('我是end');
	    //    req.timeout(Number.MAX_SAFE_INTEGER);
	    //    //req.abort(123);
	    // })
	};
	exports.default = {
	    get: function get(url) {
	        // 根据约定，所有得ajax请求以api开头
	        url = '/api' + url;
	        return _superagent2.default.get(url).use(filter);
	    },
	    post: function post(url) {
	        url = '/api' + url;
	        return _superagent2.default.post(url).use(filter).send({ _csrf: (0, _common.getCsrf)() });
	    },
	    put: function put(url) {
	        url = '/api' + url;
	        return _superagent2.default.put(url).use(filter).send({ _csrf: (0, _common.getCsrf)() });
	    },
	    del: function del(url) {
	        url = '/api' + url;
	        return _superagent2.default.del(url).use(filter).send({ _csrf: (0, _common.getCsrf)() });
	    }
	};
	module.exports = exports['default'];

/***/ },

/***/ 118:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.ValidationRule = exports.TipMessage = exports.Storage = exports.Request = exports.PubSubMsg = exports.Cookie = exports.Common = undefined;

	var _common = __webpack_require__(153);

	var Common = _interopRequireWildcard(_common);

	var _Cookie = __webpack_require__(182);

	var _Cookie2 = _interopRequireDefault(_Cookie);

	var _pubsubmsg = __webpack_require__(121);

	var _pubsubmsg2 = _interopRequireDefault(_pubsubmsg);

	var _request = __webpack_require__(112);

	var _request2 = _interopRequireDefault(_request);

	var _storage = __webpack_require__(156);

	var _storage2 = _interopRequireDefault(_storage);

	var _tipMessage = __webpack_require__(148);

	var _tipMessage2 = _interopRequireDefault(_tipMessage);

	var _validationRule = __webpack_require__(183);

	var _validationRule2 = _interopRequireDefault(_validationRule);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	exports.Common = Common;
	exports.Cookie = _Cookie2.default;
	exports.PubSubMsg = _pubsubmsg2.default;
	exports.Request = _request2.default;
	exports.Storage = _storage2.default;
	exports.TipMessage = _tipMessage2.default;
	exports.ValidationRule = _validationRule2.default;

/***/ },

/***/ 121:
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/** ========================================================
	 *  发布订阅模式,带有消息队列 生产者消费者 性质
	 *  =======================================================*/

	var PubSubMsg = function () {
	    function PubSubMsg() {
	        _classCallCheck(this, PubSubMsg);

	        this.topics = {};
	        this.unConsumedMsg = {};
	    }

	    _createClass(PubSubMsg, [{
	        key: 'publish',


	        /**
	         * 发布或广播事件
	         * @param topic {string} 事件名称
	         * @param args {*} 回调参数
	         * @returns {*}
	         */
	        value: function publish(topic, args) {
	            /*
	             * 消息统一放入消息队列当中。
	             * 注意：为了后订阅的所有订阅者都能接受到消息，这个消息队列不会被清空，如果存在大量的后订阅情况，小心内存溢出。
	             * */
	            this.unConsumedMsg[topic] = args;
	            if (!this.topics[topic]) {
	                return false;
	            }

	            _Object$keys = Object.keys(this.topics[topic]);

	            if (!(_Object$keys && typeof _Object$keys[Symbol.iterator] === 'function')) {
	                throw new TypeError('Expected _Object$keys to be iterable, got ' + (_Object$keys === null ? 'null' : (typeof _Object$keys === 'undefined' ? 'undefined' : _typeof(_Object$keys)) === 'object' && _Object$keys.constructor ? _Object$keys.constructor.name || '[Unknown Object]' : typeof _Object$keys === 'undefined' ? 'undefined' : _typeof(_Object$keys)));
	            }

	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = _Object$keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var _Object$keys;

	                    var p = _step.value;

	                    var func = this.topics[topic][p].func;
	                    var once = this.topics[topic][p].once;
	                    if (func) {
	                        func(args);
	                        if (once) {
	                            delete this.topics[topic][p];
	                        }
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return this;
	        }

	        /**
	         * 同subscribe，但是回调函数只触发一次
	         * @param topic {string} 事件名称
	         * @param name {string} 订阅者名称
	         * @param func {function} 回调函数
	         */

	    }, {
	        key: 'subscribeOnce',
	        value: function subscribeOnce(topic, name, func) {
	            if (typeof name === 'function') {
	                func = name;
	                name = new Date().getTime(); // 未指定name，使用时间戳，指定一个
	            }
	            return this.commonSubscribe(topic, name, func, true, false);
	        }

	        /**
	         * 同subscribeOnce,但是会消费历史消息
	         * @param topic {string} 事件名称
	         * @param name {string} 订阅者名称
	         * @param func {function} 回调函数
	         */

	    }, {
	        key: 'subscribeOnceAcceptOldMsg',
	        value: function subscribeOnceAcceptOldMsg(topic, name, func) {
	            if (typeof name === 'function') {
	                func = name;
	                name = new Date().getTime(); // 未指定name，使用时间戳，指定一个
	            }
	            return this.commonSubscribe(topic, name, func, true, true);
	        }

	        /**
	         * subscribe,但是会消费历史消息
	         * @param topic {string} 事件名称
	         * @param name {string} 订阅者名称
	         * @param func {function} 回调函数
	         */

	    }, {
	        key: 'subscribeAcceptOldMsg',
	        value: function subscribeAcceptOldMsg(topic, name, func) {
	            if (typeof name === 'function') {
	                func = name;
	                name = new Date().getTime(); // 未指定name，使用时间戳，指定一个
	            }
	            return this.commonSubscribe(topic, name, func, false, true);
	        }

	        /**
	         * 单纯的订阅.
	         * @param topic {string} 事件名称
	         * @param name {string} 订阅者名称
	         * @param func {function} 回调函数
	         */

	    }, {
	        key: 'subscribe',
	        value: function subscribe(topic, name, func) {
	            if (typeof name === 'function') {
	                func = name;
	                name = new Date().getTime(); // 未指定name，使用时间戳，指定一个
	            }
	            return this.commonSubscribe(topic, name, func, false, false);
	        }

	        /**
	         *
	         * @param topic {string} 事件名称
	         * @param name {string} 订阅者名称
	         * @param func {function} 回调函数
	         * @param once {bool} 回调函数是否只触发一次
	         * @param acceptOldMsg {bool} 是否消费历史消息
	         * @returns {PubSubMsg} 返回当前对象，便于链式调用
	         */

	    }, {
	        key: 'commonSubscribe',
	        value: function commonSubscribe(topic, name, func, once, acceptOldMsg) {
	            if (!this.topics[topic]) {
	                this.topics[topic] = {};
	            }
	            this.topics[topic][name] = {
	                func: func,
	                once: once
	            };
	            if (acceptOldMsg) {
	                /* 对应topic下加入回调函数
	                 * 查询是否有未消费的相应消息，如果有，立即执行回调。
	                 * */
	                if (topic in this.unConsumedMsg) {
	                    var data = this.unConsumedMsg[topic];
	                    func(data);
	                }
	            }
	            return this;
	        }

	        /**
	         * 根据事件名称，订阅者名称，取消订阅
	         * @param topic {string} 事件名称
	         * @param name {string} 订阅者名称
	         * @returns {*}
	         */

	    }, {
	        key: 'unsubscribe',
	        value: function unsubscribe(topic, name) {
	            if (!this.topics[topic]) {
	                return false;
	            }

	            if (!name) {
	                // 解绑所有 topic 事件
	                delete this.topics[topic];
	            } else if (this.topics[topic][name]) {
	                // 解绑 topic 事件下的指定 name 订阅者
	                delete this.topics[topic][name];
	            }
	            return this;
	        }
	    }]);

	    return PubSubMsg;
	}();

	exports.default = new PubSubMsg();
	module.exports = exports['default'];

/***/ },

/***/ 141:
/***/ function(module, exports) {

	module.exports = ReactDOM;

/***/ },

/***/ 148:
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var tipMessage = {
	    loginNameFormatError: '登录名不可用！',
	    logoutError: '登录失败！',
	    emailFormatError: '请输入正确的邮箱！',
	    mobileFormatError: '请输入正确的电话号码！',
	    canNotBeNull: function canNotBeNull() {
	        var name = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

	        return name + '不能为空！';
	    }
	};
	exports.default = tipMessage;
	module.exports = exports['default'];

/***/ },

/***/ 153:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.exportFile = exportFile;
	exports.getCsrf = getCsrf;
	exports.getCurrentLoginUser = getCurrentLoginUser;
	exports.getScrollBarWidth = getScrollBarWidth;
	exports.hasParent = hasParent;
	exports.convertToTree = convertToTree;

	var _objectAssign = __webpack_require__(4);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _storage = __webpack_require__(156);

	var _storage2 = _interopRequireDefault(_storage);

	var _request = __webpack_require__(112);

	var _request2 = _interopRequireDefault(_request);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * 导出文件，内部使用form实现
	 * @param url {String} 路径
	 * @param params {Object} 请求参数
	 */
	function exportFile(url, params) {
	    var urlParams = [];
	    _Object$keys = Object.keys(params);

	    if (!(_Object$keys && typeof _Object$keys[Symbol.iterator] === 'function')) {
	        throw new TypeError('Expected _Object$keys to be iterable, got ' + (_Object$keys === null ? 'null' : (typeof _Object$keys === 'undefined' ? 'undefined' : _typeof(_Object$keys)) === 'object' && _Object$keys.constructor ? _Object$keys.constructor.name || '[Unknown Object]' : typeof _Object$keys === 'undefined' ? 'undefined' : _typeof(_Object$keys)));
	    }

	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;

	    try {
	        for (var _iterator = _Object$keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var _Object$keys;

	            var p = _step.value;

	            var key = p;
	            var value = params[p];
	            if (value !== undefined && value !== null && value !== '') {
	                urlParams.push({
	                    key: key,
	                    value: value
	                });
	            }
	        }
	    } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion && _iterator.return) {
	                _iterator.return();
	            }
	        } finally {
	            if (_didIteratorError) {
	                throw _iteratorError;
	            }
	        }
	    }

	    var exportForm = document.createElement('form');
	    exportForm.method = 'get';
	    exportForm.action = url;
	    urlParams.forEach(function (v) {
	        var input = document.createElement('input');
	        input.type = 'text';
	        input.name = v.key;
	        input.value = v.value;
	        exportForm.appendChild(input);
	    });
	    exportForm.submit();
	}

	/**
	 * 获取csrf字符串
	 * @returns {string}
	 */
	function getCsrf() {
	    return document.querySelector('meta[name="csrf-token"]').getAttribute('content');
	}

	/**
	 * 获取当前登陆用户数据，如果获取失败，跳转登录。
	 * @returns {object}
	 */
	function getCurrentLoginUser() {
	    // 这个session是浏览器tab页关闭就清除
	    // 后台存放用户信息的session是浏览器窗口关闭才失效
	    // 如果关闭tab，前端session清除，后端session未清除，后端允许跳转未登录页面（对于后端来说，是已经登录状态）
	    // 调用如下代码，就会返回null，然后报错。
	    // 调用signout接口，清除后端得session，重新跳转当前页面，就会重新走登录。
	    // 这样关闭tab页，就算用户退出登录。
	    var currentLoginUser = _storage2.default.session.get('currentLoginUser');
	    if (!currentLoginUser) {
	        var _ret = function () {
	            var pathName = location.pathname;
	            _request2.default.post('/signout').send({ _csrf: getCsrf() }).end(function (err, res) {
	                if (err || !res.ok) {
	                    location.href = '/signin';
	                } else {
	                    location.href = pathName;
	                }
	            });
	            return {
	                v: null
	            };
	        }();

	        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	    }
	    return currentLoginUser;
	}

	/**
	 * 获取浏览器滚动条宽度
	 * @returns {number}
	 */
	function getScrollBarWidth() {
	    var scrollDiv = document.createElement('div');
	    scrollDiv.style.position = 'absolute';
	    scrollDiv.style.top = '-9999px';
	    scrollDiv.style.width = '50px';
	    scrollDiv.style.height = '50px';
	    scrollDiv.style.overflow = 'scroll';
	    document.body.appendChild(scrollDiv);
	    var scrollBarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	    window.document.body.removeChild(scrollDiv);
	    return scrollBarWidth;
	}

	/**
	 * 检测某个节点是否有parent节点
	 * @param rows 所有节点
	 * @param row 需要判断得节点
	 * @returns {boolean}
	 */
	function hasParent(rows, row) {
	    var parentKey = row.parentKey;
	    for (var i = 0; i < rows.length; i++) {
	        if (rows[i].key === parentKey) return true;
	    }
	    return false;
	}

	/**
	 * js构造树方法。
	 * @param rows 具有key，parentKey关系的扁平数据结构
	 * @param parentNode 开始节点
	 * @returns {array}
	 */
	function convertToTree(rows, parentNode) {
	    // 这个函数会被多次调用，对rows做深拷贝，否则会产生副作用。
	    rows = rows.map(function (row) {
	        return (0, _objectAssign2.default)({}, row);
	    });
	    parentNode = (0, _objectAssign2.default)({}, parentNode);

	    var nodes = [];
	    if (parentNode) {
	        nodes.push(parentNode);
	    } else {
	        // 获取所有的顶级节点
	        for (var i = 0; i < rows.length; i++) {
	            var row = rows[i];
	            if (!hasParent(rows, row.parentKey)) {
	                nodes.push(row);
	            }
	        }
	    }

	    // 存放要处理的节点
	    var toDo = nodes.map(function (v) {
	        return v;
	    });

	    while (toDo.length) {
	        // 处理一个，头部弹出一个。
	        var node = toDo.shift();
	        // 获取子节点。
	        for (var _i = 0; _i < rows.length; _i++) {
	            var _row = rows[_i];
	            if (_row.parentKey === node.key) {
	                var child = _row;
	                var parentKeys = [node.key];
	                if (node.parentKeys) {
	                    parentKeys = node.parentKeys.concat(node.key);
	                }
	                child.parentKeys = parentKeys;
	                var parentText = [node.text];
	                if (node.parentText) {
	                    parentText = node.parentText.concat(node.text);
	                }
	                child.parentText = parentText;

	                if (node.children) {
	                    node.children.push(child);
	                } else {
	                    node.children = [child];
	                }
	                // child加入toDo，继续处理
	                toDo.push(child);
	            }
	        }
	    }
	    if (parentNode) {
	        return nodes[0].children;
	    }
	    return nodes;
	}

/***/ },

/***/ 156:
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 *  本地存储封装，项目中其他地方不要直接使用localStorage和sessionStorage，统一使用封装。
	 *  简化接口，字符串json转换。
	 */
	exports.default = {
	    local: {
	        get: function get(key) {
	            var strValue = localStorage.getItem(key);
	            return JSON.parse(strValue);
	        },
	        set: function set(key, jsonValue) {
	            var strValue = JSON.stringify(jsonValue);
	            localStorage.setItem(key, strValue);
	        },
	        remove: function remove(key) {
	            localStorage.removeItem(key);
	        }
	    },
	    session: {
	        get: function get(key) {
	            var strValue = sessionStorage.getItem(key);
	            return JSON.parse(strValue);
	        },
	        set: function set(key, jsonValue) {
	            var strValue = JSON.stringify(jsonValue);
	            sessionStorage.setItem(key, strValue);
	        },
	        remove: function remove(key) {
	            sessionStorage.removeItem(key);
	        }
	    }
	};
	module.exports = exports['default'];

/***/ },

/***/ 181:
/***/ function(module, exports) {

	/**
	 * Check if `obj` is an object.
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */

	function isObject(obj) {
	  return null != obj && 'object' == typeof obj;
	}

	module.exports = isObject;


/***/ },

/***/ 182:
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    getCookie: function getCookie(objName) {
	        // 获取指定名称的cookie的值
	        var arrStr = document.cookie.split('; ');
	        for (var i = 0; i < arrStr.length; i++) {
	            var temp = arrStr[i].split('=');
	            if (temp[0] === objName) return unescape(temp[1]);
	        }
	        return '';
	    }
	};
	module.exports = exports['default'];

/***/ },

/***/ 183:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _tipMessage = __webpack_require__(148);

	var _tipMessage2 = _interopRequireDefault(_tipMessage);

	var _superagent = __webpack_require__(8);

	var _superagent2 = _interopRequireDefault(_superagent);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = {
	    required: function required(name) {
	        return { required: true, message: _tipMessage2.default.canNotBeNull(name) };
	    },
	    loginName: function loginName(message) {
	        return {
	            validator: function validator(rule, value, callback) {
	                if (value && !/^[a-zA-Z0-9\-_]+$/i.test(value)) {
	                    callback(new Error(message || _tipMessage2.default.loginNameFormatError));
	                } else {
	                    callback();
	                }
	            }
	        };
	    },

	    /**
	     * 判断登录名是否重复
	     * @param ignoreValues {Array} 这些名字不进行检测，用于修改的情况。
	     * @returns {*}
	     */
	    checkLoginNameExist: function checkLoginNameExist() {
	        var ignoreValues = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

	        if (typeof ignoreValues === 'string') {
	            ignoreValues = [ignoreValues];
	        }
	        return {
	            validator: function validator(rule, value, callback) {
	                if (!value || ignoreValues.includes(value)) {
	                    return callback();
	                }
	                _superagent2.default.get('/api/organization/users/loginname/' + value).end(function (err, res) {
	                    if (err || !res.ok) {
	                        return callback([new Error(res && res.body && res.body.message || '未知系统错误')]);
	                    }
	                    if (res.body && value === res.body.loginname) {
	                        return callback([new Error('抱歉，该登录名已被占用！')]);
	                    }
	                    callback();
	                });
	            }
	        };
	    },

	    /**
	     * 判断角色名是否重复
	     * @param ignoreValues {Array} 这些名字不进行检测，用于修改的情况。
	     * @returns {*}
	     */
	    checkRoleNameExist: function checkRoleNameExist() {
	        var ignoreValues = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

	        if (typeof ignoreValues === 'string') {
	            ignoreValues = [ignoreValues];
	        }
	        return {
	            validator: function validator(rule, value, callback) {
	                if (!value || ignoreValues.includes(value)) {
	                    return callback();
	                }
	                _superagent2.default.get('/api/organization/users/loginname/' + value).end(function (err, res) {
	                    if (err || !res.ok) {
	                        return callback([new Error(res && res.body && res.body.message || '未知系统错误')]);
	                    }
	                    if (res.body && value === res.body.loginname) {
	                        return callback([new Error('抱歉，该登录名已被占用！')]);
	                    }
	                    callback();
	                });
	            }
	        };
	    },
	    mobile: function mobile(message) {
	        return {
	            validator: function validator(rule, value, callback) {
	                // FIXME 这个校验规则不太好
	                /*
	                 * 匹配格式：
	                 11位手机号码
	                 3-4位区号，7-8位直播号码，1－4位分机号
	                 如：12345678901、1234-12345678-1234
	                 * */
	                var re = /((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)/;
	                if (value && !re.test(value)) {
	                    callback(new Error(message || _tipMessage2.default.mobileFormatError));
	                } else {
	                    callback();
	                }
	            }
	        };
	    },
	    email: function email(message) {
	        return { type: 'email', message: message || _tipMessage2.default.emailFormatError };
	    }
	};
	module.exports = exports['default'];

/***/ },

/***/ 217:
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Expose `Emitter`.
	 */

	if (true) {
	  module.exports = Emitter;
	}

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks['$' + event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },

/***/ 270:
/***/ function(module, exports) {

	
	/**
	 * Reduce `arr` with `fn`.
	 *
	 * @param {Array} arr
	 * @param {Function} fn
	 * @param {Mixed} initial
	 *
	 * TODO: combatible error handling?
	 */

	module.exports = function(arr, fn, initial){  
	  var idx = 0;
	  var len = arr.length;
	  var curr = arguments.length == 3
	    ? initial
	    : arr[idx++];

	  while (idx < len) {
	    curr = fn.call(null, curr, arr[idx], ++idx, arr);
	  }
	  
	  return curr;
	};

/***/ },

/***/ 279:
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module of mixed-in functions shared between node and client code
	 */
	var isObject = __webpack_require__(181);

	/**
	 * Clear previous timeout.
	 *
	 * @return {Request} for chaining
	 * @api public
	 */

	exports.clearTimeout = function _clearTimeout(){
	  this._timeout = 0;
	  clearTimeout(this._timer);
	  return this;
	};

	/**
	 * Force given parser
	 *
	 * Sets the body parser no matter type.
	 *
	 * @param {Function}
	 * @api public
	 */

	exports.parse = function parse(fn){
	  this._parser = fn;
	  return this;
	};

	/**
	 * Set timeout to `ms`.
	 *
	 * @param {Number} ms
	 * @return {Request} for chaining
	 * @api public
	 */

	exports.timeout = function timeout(ms){
	  this._timeout = ms;
	  return this;
	};

	/**
	 * Faux promise support
	 *
	 * @param {Function} fulfill
	 * @param {Function} reject
	 * @return {Request}
	 */

	exports.then = function then(fulfill, reject) {
	  return this.end(function(err, res) {
	    err ? reject(err) : fulfill(res);
	  });
	}

	/**
	 * Allow for extension
	 */

	exports.use = function use(fn) {
	  fn(this);
	  return this;
	}


	/**
	 * Get request header `field`.
	 * Case-insensitive.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */

	exports.get = function(field){
	  return this._header[field.toLowerCase()];
	};

	/**
	 * Get case-insensitive header `field` value.
	 * This is a deprecated internal API. Use `.get(field)` instead.
	 *
	 * (getHeader is no longer used internally by the superagent code base)
	 *
	 * @param {String} field
	 * @return {String}
	 * @api private
	 * @deprecated
	 */

	exports.getHeader = exports.get;

	/**
	 * Set header `field` to `val`, or multiple fields with one object.
	 * Case-insensitive.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .set('Accept', 'application/json')
	 *        .set('X-API-Key', 'foobar')
	 *        .end(callback);
	 *
	 *      req.get('/')
	 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
	 *        .end(callback);
	 *
	 * @param {String|Object} field
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */

	exports.set = function(field, val){
	  if (isObject(field)) {
	    for (var key in field) {
	      this.set(key, field[key]);
	    }
	    return this;
	  }
	  this._header[field.toLowerCase()] = val;
	  this.header[field] = val;
	  return this;
	};

	/**
	 * Remove header `field`.
	 * Case-insensitive.
	 *
	 * Example:
	 *
	 *      req.get('/')
	 *        .unset('User-Agent')
	 *        .end(callback);
	 *
	 * @param {String} field
	 */
	exports.unset = function(field){
	  delete this._header[field.toLowerCase()];
	  delete this.header[field];
	  return this;
	};

	/**
	 * Write the field `name` and `val` for "multipart/form-data"
	 * request bodies.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .field('foo', 'bar')
	 *   .end(callback);
	 * ```
	 *
	 * @param {String} name
	 * @param {String|Blob|File|Buffer|fs.ReadStream} val
	 * @return {Request} for chaining
	 * @api public
	 */
	exports.field = function(name, val) {
	  this._getFormData().append(name, val);
	  return this;
	};


/***/ },

/***/ 280:
/***/ function(module, exports) {

	// The node and browser modules expose versions of this with the
	// appropriate constructor function bound as first argument
	/**
	 * Issue a request:
	 *
	 * Examples:
	 *
	 *    request('GET', '/users').end(callback)
	 *    request('/users').end(callback)
	 *    request('/users', callback)
	 *
	 * @param {String} method
	 * @param {String|Function} url or callback
	 * @return {Request}
	 * @api public
	 */

	function request(RequestConstructor, method, url) {
	  // callback
	  if ('function' == typeof url) {
	    return new RequestConstructor('GET', method).end(url);
	  }

	  // url first
	  if (2 == arguments.length) {
	    return new RequestConstructor('GET', method);
	  }

	  return new RequestConstructor(method, url);
	}

	module.exports = request;


/***/ }

/******/ });